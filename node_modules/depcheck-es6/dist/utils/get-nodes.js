'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _WeakSet = require('babel-runtime/core-js/weak-set')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = getNodes;
function recursive(ast, visited) {
  var nodes = [];

  if (ast && ast.type && !visited.has(ast)) {
    visited.add(ast);
    nodes.push(ast);
  }

  if (Array.isArray(ast)) {
    return nodes.concat.apply(nodes, _toConsumableArray(ast.map(function (node) {
      return recursive(node, visited);
    })));
  } else if (ast && typeof ast === 'object') {
    return nodes.concat.apply(nodes, _toConsumableArray(_Object$keys(ast).filter(function (key) {
      return key !== 'tokens' && key !== 'comments';
    }).map(function (key) {
      return recursive(ast[key], visited);
    })));
  }

  return nodes;
}

function getNodes(ast) {
  var visited = new _WeakSet();
  var nodes = recursive(ast, visited);
  return nodes;
}

module.exports = exports['default'];