'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = cli;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _utilsOutput = require('./utils/output');

var _utilsOutput2 = _interopRequireDefault(_utilsOutput);

var _utilsWebReport = require('./utils/web-report');

var _utilsWebReport2 = _interopRequireDefault(_utilsWebReport);

function checkPathExist(dir) {
  return new _Promise(function (resolve, reject) {
    return _fs2['default'].exists(dir, function (result) {
      return result ? resolve() : reject();
    });
  });
}

function getParsers(parsers) {
  return typeof parsers === 'undefined' ? undefined : _Object$assign.apply(Object, [{}].concat(_toConsumableArray(parsers.split(',').map(function (keyValuePair) {
    var _keyValuePair$split = keyValuePair.split(':');

    var _keyValuePair$split2 = _slicedToArray(_keyValuePair$split, 2);

    var glob = _keyValuePair$split2[0];
    var value = _keyValuePair$split2[1];

    return _defineProperty({}, glob, value.split('&').map(function (name) {
      return _index2['default'].parser[name];
    }));
  }))));
}

function getDetectors(detectors) {
  return typeof detectors === 'undefined' ? undefined : detectors.split(',').map(function (name) {
    return _index2['default'].detector[name];
  });
}

function getSpecials(specials) {
  return typeof specials === 'undefined' ? undefined : specials.split(',').map(function (name) {
    return _index2['default'].special[name];
  });
}

function cli(args, env, log, error, exit) {
  var opt = (0, _yargs2['default'])(args).usage('Usage: $0 [DIRECTORY]').boolean(['dev', 'ignore-bin-package']).string(['web-report', 'web-service'])['default']({
    'dev': true,
    'ignore-bin-package': true,
    'web-service': 'https://depcheck.tk'
  }).describe('dev', 'Check on devDependecies').describe('ignore-bin-package', 'Ignore package with bin entry').describe('json', 'Output results to JSON').describe('ignores', 'Comma separated package list to ignore').describe('ignore-dirs', 'Comma separated folder names to ignore').describe('web-report', 'Generate web report with depcheck web service').describe('web-service', 'Specify depcheck web service URL').describe('parsers', 'Comma separated glob:pasers pair list').describe('detectors', 'Comma separated detector list').describe('specials', 'Comma separated special parser list').describe('help', 'Show this help message');

  if (opt.argv.help) {
    log(opt.help());
    exit(0);
  } else {
    (function () {
      var dir = opt.argv._[0] || '.';
      var rootDir = _path2['default'].resolve(dir);

      checkPathExist(rootDir)['catch'](function () {
        error('Path ' + dir + ' does not exist');
        exit(-1);
      }).then(function () {
        return checkPathExist(_path2['default'].resolve(rootDir, 'package.json'));
      })['catch'](function () {
        error('Path ' + dir + ' does not contain a package.json file');
        log(opt.help());
        exit(-1);
      }).then(function () {
        return (0, _index2['default'])(rootDir, {
          withoutDev: !opt.argv.dev,
          ignoreBinPackage: opt.argv.ignoreBinPackage,
          ignoreMatches: (opt.argv.ignores || '').split(','),
          ignoreDirs: (opt.argv.ignoreDirs || '').split(','),
          parsers: getParsers(opt.argv.parsers),
          detectors: getDetectors(opt.argv.detectors),
          specials: getSpecials(opt.argv.specials)
        });
      }).then(function (result) {
        return (0, _utilsOutput2['default'])(result, log, opt.argv.json);
      }).then(function (result) {
        return (0, _utilsWebReport2['default'])(result, log, error, env, opt.argv);
      }).then(function (_ref2) {
        var dependencies = _ref2.dependencies;
        var devDependencies = _ref2.devDependencies;
        return exit(opt.argv.json || dependencies.length === 0 && devDependencies.length === 0 ? 0 : -1);
      });
    })();
  }
}

module.exports = exports['default'];